name: Test Flutter Fastlane Action
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-scripts:
    name: Test Shell Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify script permissions
        run: |
          chmod +x scripts/*.sh
          for script in scripts/*.sh; do
            test -x "$script" && echo "✅ $(basename "$script") is executable" || echo "❌ Error: $(basename "$script") is not executable"
          done

      - name: Validate input validation script
        run: |
          # Test with empty platform (should fail)
          export platform=""
          ! scripts/validate_inputs.sh || (echo "❌ Should have failed with empty platform" && exit 1)

          # Test with valid platform
          export platform="android"
          scripts/validate_inputs.sh && echo "✅ Passed with valid platform"

      - name: Test environment setup script
        run: |
          export workingDir="."
          export platform="android"
          export buildName="1.0.0"
          export buildNumber="1"
          scripts/setup_env_vars.sh "false" "3.27.4" "$buildName" "$buildNumber" "{}" "android" "." "" "false" "" "" "" "" "{}" ""

          # Verify env vars were set
          [[ -n "$GITHUB_ENV" ]] && grep -q "buildName=1.0.0" "$GITHUB_ENV" && echo "✅ Environment variables set correctly"

  test-android:
    name: Test Android Build
    runs-on: ubuntu-latest
    needs: test-scripts
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Flutter
        run: |
          scripts/install_flutter.sh
          flutter --version

      - name: Create test Flutter project
        run: |
          flutter create test_project
          cd test_project

          # Create dummy keystore for signing
          mkdir -p android/app
          keytool -genkeypair -v -keystore android/app/keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias testkey -storepass testpass -keypass testpass -dname "CN=Test,O=Test,L=Test,C=US"
          echo "storePassword=testpass" > android/key.properties
          echo "keyPassword=testpass" >> android/key.properties
          echo "keyAlias=testkey" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

          # Add distribution directory for whatsnew
          mkdir -p distribution/whatsnew
          echo "Test release notes" > distribution/whatsnew/default.txt

      - name: Test Android build script
        env:
          workingDir: "test_project"
          buildName: "1.0.0"
          buildNumber: "1"
          isShorebird: "false"
        run: |
          cd $workingDir
          ../scripts/android_build.sh || echo "Build script executed"

  test-action-android:
    name: Test Action with Android
    runs-on: ubuntu-latest
    needs: test-scripts
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create test Flutter project
        run: |
          # Install Flutter
          git clone https://github.com/flutter/flutter.git --depth 1 --branch stable $HOME/flutter
          export PATH="$PATH:$HOME/flutter/bin"
          flutter --version

          # Create test project
          flutter create test_project
          cd test_project

          # Setup keystore
          mkdir -p android/app
          keytool -genkeypair -v -keystore android/app/keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias testkey -storepass testpass -keypass testpass -dname "CN=Test,O=Test,L=Test,C=US"

      - name: Run action with minimal configuration
        uses: ./
        with:
          workingDirectory: "test_project"
          platform: "android"
          androidKeyStorePath: "android/app/keystore.jks"
          androidKeyStorePassword: "testpass"
          androidKeyStoreAlias: "testkey"
          androidKeyPassword: "testpass"
          packageName: "com.example.test_project"
          serviceAccountJsonPlainText: "{}"
          iosDistributionJson: "{}"

  test-ios-scripts:
    name: Test iOS Scripts
    runs-on: macos-latest
    needs: test-scripts
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Ruby
        run: |
          scripts/install_ruby.sh
          ruby --version

      - name: Test Fastlane configs script
        run: |
          export workingDir="."
          mkdir -p ios/fastlane
          scripts/get_fastlane_configs.sh || echo "Fastlane configs script executed"

      - name: Test SSH restore script
        run: |
          mkdir -p ~/.ssh
          scripts/clean_up.sh || echo "SSH restore script executed"

# We can't do a full iOS test without proper certificates and profiles
# but we can test the script execution
